generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username               String                   @unique
  hashed_password        String?
  fname                  String
  lname                  String
  email                  String                   @unique @db.VarChar(125)
  profile_picture        String?
  addId                  String?                  @unique
  phone                  String                   @db.VarChar(10)
  tierId                 Int?
  userId                 Int                      @id @default(autoincrement())
  Article                Article[]
  Chat_Room_Logs         Chat_Room_Logs[]
  Comments               Comments[]
  Complain_ticket        Complain_ticket[]
  Credit_card            Credit_card[]
  Driver_reviews         Driver_reviews[]
  Food_reviews           Food_reviews[]
  user                   Friendship[]             @relation("user")
  friend                 Friendship[]             @relation("friend")
  Group_user             Group_user[]
  Like                   Like[]
  Message                Message[]
  Notification_setting   Notification_setting?
  Orders                 Orders[]
  Payment_method         Payment_method?
  Point                  Point[]
  Privacy_policies       Privacy_policies?
  Rate_general_questions Rate_general_questions[]
  Rate_venue_question    Rate_venue_question[]
  Recommendation         Recommendation[]
  Reservation            Reservation[]
  Saved_location         Saved_location[]
  Saved_place            Saved_place[]
  Search_history         Search_history[]
  System_access          System_access?
  Term_of_services       Term_of_services?
  Transaction            Transaction[]
  tier                   Member_tier?             @relation(fields: [tierId], references: [tierId])
  User_bio               User_bio?
  User_voucher           User_voucher[]
  Venue_reviews          Venue_reviews[]

  @@index([tierId], map: "User_tierId_fkey")
}

model User_bio {
  userId   Int      @id
  birthday DateTime @db.Date
  gender   Gender
  user     User     @relation(fields: [userId], references: [userId])
}

model Payment_method {
  method Method?
  userId Int     @id @unique
  user   User    @relation(fields: [userId], references: [userId])
}

model Notification_setting {
  userId    Int     @id
  in_app    Boolean @default(false)
  email     Boolean @default(false)
  offers    Boolean @default(false)
  updates   Boolean @default(false)
  feedbacks Boolean @default(false)
  user      User    @relation(fields: [userId], references: [userId])
}

model System_access {
  userId         Int     @id
  location_acces Boolean @default(false)
  file_access    Boolean @default(false)
  user           User    @relation(fields: [userId], references: [userId])
}

model Term_of_services {
  privacy_consent Boolean @default(false)
  userId          Int     @id @unique
  user            User    @relation(fields: [userId], references: [userId])
}

model Privacy_policies {
  privacy_consent Boolean @default(false)
  cookie_consent  Boolean @default(false)
  userId          Int     @id @unique
  user            User    @relation(fields: [userId], references: [userId])
}

model About_app {
  version     String
  detail      String?
  last_update DateTime
  aboutAppId  Int      @id
}

model Group_user {
  groupId  Int
  memberId Int
  group    Group @relation(fields: [groupId], references: [groupId])
  member   User  @relation(fields: [memberId], references: [userId])

  @@id([groupId, memberId])
  @@index([memberId], map: "Group_user_memberId_fkey")
}

model Group {
  groupId    Int          @id @default(autoincrement())
  group_name String
  Group_user Group_user[]
}

model Friendship {
  firstUserId   Int
  sencondUserId Int
  status        Friend_status
  since         DateTime
  user          User          @relation("user", fields: [firstUserId], references: [userId])
  friend        User          @relation("friend", fields: [sencondUserId], references: [userId])

  @@id([firstUserId, sencondUserId])
  @@index([sencondUserId], map: "Friendship_sencondUserId_fkey")
}

model Venue {
  name              String
  description       String?
  category          String?
  capacity          Int
  chatRoomId        Int                 @unique
  locationId        Int                 @unique
  score             Decimal
  venueId           Int                 @id @default(autoincrement())
  website_url       String
  App_transaction   App_transaction[]
  Article_venue     Article_venue[]
  Business_finance  Business_finance[]
  Chatroom          Chat_room?
  Complain_ticket   Complain_ticket[]
  Deposit           Deposit[]
  Menu              Menu[]
  Opening_day       Opening_day[]
  Orders            Orders[]
  Promotion         Promotion[]
  Property          Property[]
  Recommendation    Recommendation[]
  Reservation       Reservation[]
  Saved_place       Saved_place[]
  Sets              Sets[]
  Table_type_detail Table_type_detail[]
  Tables            Tables[]
  Transaction       Transaction[]
  Venue_branch      Venue_branch[]
  Venue_credit_card Venue_credit_card[]
  Venue_keywords    Venue_keywords?
  Venue_managers    Venue_managers?
  Venue_photo       Venue_photo?
  Venue_promptpay   Venue_promptpay?
  Venue_question    Venue_question[]
  Venue_reviews     Venue_reviews[]
  Venue_transaction Venue_transaction[]
  Voucher           Voucher[]
}

model Venue_branch {
  branchId    Int      @id @default(autoincrement())
  venueId     Int
  branch_name String
  Orders      Orders[]
  venue       Venue    @relation(fields: [venueId], references: [venueId])

  @@index([venueId], map: "Venue_branch_venueId_fkey")
}

model Venue_contacts {
  venueId   Int
  contact   String
  contactId Int          @id @default(autoincrement())
  type      Contact_type
}

model Venue_reviews {
  venuId        Int
  userId        Int
  rating        Int
  review        String?
  date_added    DateTime @default(now())
  venueReviewId Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [userId])
  venue         Venue    @relation(fields: [venuId], references: [venueId])

  @@index([userId], map: "Venue_reviews_userId_fkey")
  @@index([venuId], map: "Venue_reviews_venuId_fkey")
}

model Venue_managers {
  venueId    Int     @unique
  first_name String
  last_name  String
  email      String?
  phone      String? @db.VarChar(10)
  SSN        String  @id @db.VarChar(10)
  venue      Venue   @relation(fields: [venueId], references: [venueId])
}

model Venue_keywords {
  venueId Int     @id
  keyword String?
  venue   Venue   @relation(fields: [venueId], references: [venueId])
}

model Opening_day {
  closing_hours DateTime @db.Time(0)
  day           Day
  openingDayId  Int      @id @default(autoincrement())
  opening_hours DateTime @db.Time(0)
  venueId       Int
  venue         Venue    @relation(fields: [venueId], references: [venueId])

  @@index([venueId], map: "Opening_day_venueId_fkey")
}

model Venue_photo {
  venueId    Int      @id
  image_url  String?
  date_added DateTime @default(now())
  venue      Venue    @relation(fields: [venueId], references: [venueId])
}

model Search_history {
  userId          Int
  keywords        String?
  timestamp       DateTime @default(now())
  searchHistoryId Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Search_history_userId_fkey")
}

model Saved_place {
  id      Int   @id
  userId  Int
  venueId Int
  user    User  @relation(fields: [userId], references: [userId])
  venue   Venue @relation(fields: [venueId], references: [venueId])

  @@index([userId], map: "Saved_place_userId_fkey")
  @@index([venueId], map: "Saved_place_venueId_fkey")
}

model Member_tier {
  tier_name    String
  tier_benefit String
  tierId       Int    @id @default(autoincrement())
  User         User[]
}

model Point {
  amount        Int
  month_created DateTime @default(now())
  amount_used   Int?
  userId        Int
  pointId       Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Point_userId_fkey")
}

model Voucher {
  voucher_name     String
  voucher_image    String
  start_date       DateTime          @db.Date
  end_date         DateTime          @db.Date
  description      String
  point_use        Int?
  venueId          Int
  isApprove        Boolean           @default(false)
  voucherId        Int               @id @default(autoincrement())
  Discount_voucher Discount_voucher?
  Food_voucher     Food_voucher?
  User_voucher     User_voucher[]
  venue            Venue             @relation(fields: [venueId], references: [venueId])

  @@index([venueId], map: "Voucher_venueId_fkey")
}

model Discount_voucher {
  fix_discount      Int?
  percent_discount  Float?
  limitation        Int?
  minimum_spend     Int?
  voucherId         Int     @unique
  discountVoucherId Int     @id @default(autoincrement())
  discount_voucher  Voucher @relation(fields: [voucherId], references: [voucherId])
}

model Food_voucher {
  limitation    Int?
  minimum_spend Int?
  voucherId     Int     @unique
  foodVoucherId Int     @id @default(autoincrement())
  food_voucher  Voucher @relation(fields: [voucherId], references: [voucherId])
}

model User_voucher {
  userId    Int
  voucherId Int
  user      User    @relation(fields: [userId], references: [userId])
  vouchers  Voucher @relation(fields: [voucherId], references: [voucherId])

  @@id([userId, voucherId])
  @@index([voucherId], map: "User_voucher_voucherId_fkey")
}

model General_questions {
  g_question             String
  generalQuestionId      Int                      @id @default(autoincrement())
  General_answers        General_answers?
  Rate_general_questions Rate_general_questions[]
}

model General_answers {
  gQuestionId      Int               @unique
  g_answer         String
  generalAnswerId  Int               @id @default(autoincrement())
  general_question General_questions @relation(fields: [gQuestionId], references: [generalQuestionId])
}

model Rate_general_questions {
  rateGeneralQuestionId Int               @id @default(autoincrement())
  score                 Float
  questionId            Int
  userId                Int
  question              General_questions @relation(fields: [questionId], references: [generalQuestionId])
  user                  User              @relation(fields: [userId], references: [userId])

  @@index([questionId], map: "Rate_general_questions_questionId_fkey")
  @@index([userId], map: "Rate_general_questions_userId_fkey")
}

model Venue_question {
  question            String
  venueId             Int
  venueQuestionId     Int                   @id @default(autoincrement())
  Rate_venue_question Rate_venue_question[]
  Venue_answer        Venue_answer?
  venue               Venue                 @relation(fields: [venueId], references: [venueId])

  @@index([venueId], map: "Venue_question_venueId_fkey")
}

model Venue_answer {
  answer        String
  questionId    Int            @unique
  venueAnswerId Int            @id @default(autoincrement())
  question      Venue_question @relation(fields: [questionId], references: [venueQuestionId])
}

model Rate_venue_question {
  rateVenueQuestionId Int            @id @default(autoincrement())
  score               Float
  vQuestionId         Int
  userId              Int
  user                User           @relation(fields: [userId], references: [userId])
  venueQuestion       Venue_question @relation(fields: [vQuestionId], references: [venueQuestionId])

  @@index([userId], map: "Rate_venue_question_userId_fkey")
  @@index([vQuestionId], map: "Rate_venue_question_vQuestionId_fkey")
}

model Chat_room {
  roomname       String
  chatRoomId     Int              @id @default(autoincrement())
  Chat_Room_Logs Chat_Room_Logs[]
  venue          Venue            @relation(fields: [chatRoomId], references: [chatRoomId])
  Message        Message[]
}

model Chat_Room_Logs {
  logId         Int       @id @default(autoincrement())
  userId        Int
  chatRoomId    Int
  access_status Boolean   @default(true)
  chat_room     Chat_room @relation(fields: [chatRoomId], references: [chatRoomId])
  user          User      @relation(fields: [userId], references: [userId])

  @@index([chatRoomId], map: "Chat_Room_Logs_chatRoomId_fkey")
  @@index([userId], map: "Chat_Room_Logs_userId_fkey")
}

model Message {
  roomId         Int
  userId         Int
  message        String
  date_time      DateTime  @default(now())
  messageId      Int       @id @default(autoincrement())
  replyMessageId Int?
  reply_from     Message?  @relation("reply", fields: [replyMessageId], references: [messageId])
  reply          Message[] @relation("reply")
  room           Chat_room @relation(fields: [roomId], references: [chatRoomId])
  user           User      @relation(fields: [userId], references: [userId])

  @@index([replyMessageId], map: "Message_replyMessageId_fkey")
  @@index([roomId], map: "Message_roomId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

model Orders {
  userId       Int?
  venueId      Int
  order_date   DateTime
  total_amount Decimal        @db.Decimal(10, 2)
  addressId    Int?
  branchId     Int
  driverId     Int?
  isDelivery   Boolean        @default(false)
  orderId      Int            @id @default(autoincrement())
  reservedId   Int?           @unique
  status       Order_status
  Order_detail Order_detail?
  address      Saved_address? @relation(fields: [addressId], references: [addressId])
  branch       Venue_branch   @relation(fields: [branchId], references: [branchId])
  driver       Driver_list?   @relation(fields: [driverId], references: [driverId])
  reserve      Reservation?   @relation(fields: [reservedId], references: [reservationId])
  user         User?          @relation(fields: [userId], references: [userId])
  venue        Venue          @relation(fields: [venueId], references: [venueId])

  @@index([addressId], map: "Orders_addressId_fkey")
  @@index([branchId], map: "Orders_branchId_fkey")
  @@index([driverId], map: "Orders_driverId_fkey")
  @@index([userId], map: "Orders_userId_fkey")
  @@index([venueId], map: "Orders_venueId_fkey")
}

model Order_detail {
  unit_price     Decimal  @db.Decimal(10, 2)
  order_time     DateTime @default(now()) @db.Timestamp(0)
  additional_req String?
  orderId        Int      @id @default(autoincrement())
  menuId         Int?
  quantity       Int
  setId          Int?
  menu           Menu?    @relation(fields: [menuId], references: [menuId])
  order          Orders   @relation(fields: [orderId], references: [orderId])
  set            Sets?    @relation(fields: [setId], references: [setId])

  @@index([menuId], map: "Order_detail_menuId_fkey")
  @@index([setId], map: "Order_detail_setId_fkey")
}

model Menu {
  name             String
  description      String?            @db.Text
  price            Decimal            @db.Decimal(10, 2)
  venueId          Int
  image            String?
  isAvailiable     Boolean            @default(false)
  menuId           Int                @id @default(autoincrement())
  Food_reviews     Food_reviews[]
  venue            Venue              @relation(fields: [venueId], references: [venueId])
  Menu_category    Menu_category[]
  Order_detail     Order_detail[]
  Promotion        Promotion[]
  Set_items        Set_items?
  menu_ingredients menu_ingredients[]

  @@index([venueId], map: "Menu_venueId_fkey")
}

model Menu_category {
  menuId     Int
  categoryId Int
  category   Menu_category_list @relation(fields: [categoryId], references: [menuCategoryListId])
  menu       Menu               @relation(fields: [menuId], references: [menuId])

  @@id([menuId, categoryId])
  @@index([categoryId], map: "Menu_category_categoryId_fkey")
}

model Menu_category_list {
  menuCategoryListId Int             @id @default(autoincrement())
  category           String
  Menu_category      Menu_category[]
}

model Sets {
  name         String
  price        Decimal        @db.Decimal(5, 2)
  description  String?
  image_url    String?
  venueId      Int
  setId        Int            @id @default(autoincrement())
  Order_detail Order_detail[]
  Set_items    Set_items[]
  venue        Venue          @relation(fields: [venueId], references: [venueId])

  @@index([venueId], map: "Sets_venueId_fkey")
}

model Set_items {
  setId  Int
  menuId Int  @unique
  menu   Menu @relation(fields: [menuId], references: [menuId])
  set    Sets @relation(fields: [setId], references: [setId])

  @@id([setId, menuId])
}

model Ingredients {
  ingredientId     Int                @id @default(autoincrement())
  name             String
  menu_ingredients menu_ingredients[]
}

model menu_ingredients {
  menuId       Int
  ingredientId Int
  ingredient   Ingredients @relation(fields: [ingredientId], references: [ingredientId])
  menu         Menu        @relation(fields: [menuId], references: [menuId])

  @@id([menuId, ingredientId])
  @@index([ingredientId], map: "menu_ingredients_ingredientId_fkey")
}

model Food_reviews {
  foodReviewId Int      @id @default(autoincrement())
  menuId       Int
  userId       Int
  rating       Float
  review       String?
  date_added   DateTime
  menu         Menu     @relation(fields: [menuId], references: [menuId])
  user         User     @relation(fields: [userId], references: [userId])

  @@index([menuId], map: "Food_reviews_menuId_fkey")
  @@index([userId], map: "Food_reviews_userId_fkey")
}

model Complain_ticket {
  ComplainTicketId Int                @id @default(autoincrement())
  date             DateTime           @default(now())
  topic            String
  complaint        String             @db.Text
  ticket_status    Ticket_status
  ticket_priority  Ticket_priorities
  venueId          Int
  userId           Int
  teamId           Int
  team             Teams              @relation(fields: [teamId], references: [teamId])
  user             User               @relation(fields: [userId], references: [userId])
  venue            Venue              @relation(fields: [venueId], references: [venueId])
  Ticket_responses Ticket_responses[]

  @@index([teamId], map: "Complain_ticket_teamId_fkey")
  @@index([userId], map: "Complain_ticket_userId_fkey")
  @@index([venueId], map: "Complain_ticket_venueId_fkey")
}

model Ticket_responses {
  ticketResponseId Int             @id @default(autoincrement())
  complainTicketId Int
  response_title   String
  response_detail  String
  ticket           Complain_ticket @relation(fields: [complainTicketId], references: [ComplainTicketId])

  @@index([complainTicketId], map: "Ticket_responses_complainTicketId_fkey")
}

model Teams {
  teamId          Int               @id @default(autoincrement())
  team_name       String
  Complain_ticket Complain_ticket[]
  Team_member     Team_member[]
}

model Team_member {
  teamId  Int
  adminId Int
  admin   Admin_user @relation(fields: [adminId], references: [adminId])
  team    Teams      @relation(fields: [teamId], references: [teamId])

  @@id([teamId, adminId])
  @@index([adminId], map: "Team_member_adminId_fkey")
}

model Admin_user {
  adminId                    Int                         @id @default(autoincrement())
  username                   String
  hashed_password            String?
  Admin_name                 Admin_name?
  Admin_notification_setting Admin_notification_setting?
  Admin_privacy_policy       Admin_privacy_policy?
  Admin_system_access        Admin_system_access?
  Admin_terms_of_services    Admin_terms_of_services?
  Team_member                Team_member[]
}

model Admin_notification_setting {
  adminId   Int        @id
  in_app    Boolean    @default(false)
  email     Boolean    @default(false)
  offers    Boolean    @default(false)
  updates   Boolean    @default(false)
  feedbacks Boolean    @default(false)
  admin     Admin_user @relation(fields: [adminId], references: [adminId])
}

model Admin_name {
  adminId Int        @id
  fname   String
  lanem   String
  admin   Admin_user @relation(fields: [adminId], references: [adminId])
}

model Admin_privacy_policy {
  adminPrivacyPolicyId Int        @id
  privacy_consent      Boolean    @default(false)
  cookie_consent       Boolean    @default(false)
  adminId              Int        @unique
  admin                Admin_user @relation(fields: [adminId], references: [adminId])
}

model Admin_system_access {
  adminSystemAccessId Int        @id
  location_access     Boolean    @default(false)
  file_access         Boolean    @default(false)
  adminId             Int        @unique
  admin               Admin_user @relation(fields: [adminId], references: [adminId])
}

model Admin_terms_of_services {
  adminTermOfServiceId Int        @id
  term_consent         Boolean    @default(false)
  adminId              Int        @unique
  admin                Admin_user @relation(fields: [adminId], references: [adminId])
}

model Article {
  topic                   String
  content                 String                    @db.Text
  created_date            DateTime                  @default(now()) @db.Date
  category                Article_category
  userId                  Int
  articleId               Int                       @id @default(autoincrement())
  author_name             String?
  user                    User                      @relation(fields: [userId], references: [userId])
  Article_tags            Article_tags[]
  Article_venue           Article_venue[]
  Comment_like_by_creator Comment_like_by_creator[]
  Comments                Comments[]
  Image                   Images[]
  Like                    Like[]

  @@index([userId], map: "Article_userId_fkey")
}

model Images {
  url         String
  description String?
  articleId   Int
  imageId     Int     @id @default(autoincrement())
  article     Article @relation(fields: [articleId], references: [articleId])

  @@index([articleId], map: "Images_articleId_fkey")
}

model Tag {
  tag_name     String
  tagId        Int            @id @default(autoincrement())
  Article_tags Article_tags[]
}

model Article_tags {
  tagId     Int
  articleId Int
  article   Article @relation(fields: [articleId], references: [articleId])
  tag       Tag     @relation(fields: [tagId], references: [tagId])

  @@id([tagId, articleId])
  @@index([articleId], map: "Article_tags_articleId_fkey")
}

model Comments {
  content                 String
  userId                  Int
  articleId               Int
  commentId               Int                       @id @default(autoincrement())
  create_date             DateTime                  @default(now()) @db.Date
  Comment_like_by_creator Comment_like_by_creator[]
  article                 Article                   @relation(fields: [articleId], references: [articleId])
  user                    User                      @relation(fields: [userId], references: [userId])

  @@index([articleId], map: "Comments_articleId_fkey")
  @@index([userId], map: "Comments_userId_fkey")
}

model Comment_like_by_creator {
  commentId Int
  articleId Int
  article   Article  @relation(fields: [articleId], references: [articleId])
  comment   Comments @relation(fields: [commentId], references: [commentId])

  @@id([commentId, articleId])
  @@index([articleId], map: "Comment_like_by_creator_articleId_fkey")
}

model Like {
  articleId Int
  userId    Int
  article   Article @relation(fields: [articleId], references: [articleId])
  user      User    @relation(fields: [userId], references: [userId])

  @@id([articleId, userId])
  @@index([userId], map: "Like_userId_fkey")
}

model Reservation {
  venueId           Int
  guest_amount      Int
  reserved_time     DateTime            @default(now())
  status            Status
  userId            Int
  entry_time        DateTime
  isReview          Boolean             @default(false)
  reservationId     Int                 @id @default(autoincrement())
  depositId         Int                 @unique
  Check_in_log      Check_in_log?
  Notes             Notes?
  Orders            Orders?
  Deposit           Deposit             @relation(fields: [depositId], references: [depositId])
  user              User                @relation(fields: [userId], references: [userId])
  venue             Venue               @relation(fields: [venueId], references: [venueId])
  Reservation_table Reservation_table[]
  Share_reserve     Share_reserve?

  @@index([userId], map: "Reservation_userId_fkey")
  @@index([venueId], map: "Reservation_venueId_fkey")
}

model Reservation_table {
  reservationTableId Int         @id @default(autoincrement())
  amount             Int
  reserveId          Int
  tableId            Int
  reserve            Reservation @relation(fields: [reserveId], references: [reservationId])
  reserve_table      Tables      @relation(fields: [tableId], references: [tableId])

  @@index([reserveId], map: "Reservation_table_reserveId_fkey")
  @@index([tableId], map: "Reservation_table_tableId_fkey")
}

model Share_reserve {
  link_or_qr     String
  reserveId      Int         @unique
  shareReserveId Int         @id @default(autoincrement())
  reserve        Reservation @relation(fields: [reserveId], references: [reservationId])
}

model Notes {
  detail    String
  reserveId Int         @unique
  noteId    Int         @id @default(autoincrement())
  reserve   Reservation @relation(fields: [reserveId], references: [reservationId])
}

model Deposit {
  deposit_amount Decimal        @db.Decimal(10, 2)
  status         Deposit_status
  depositId      Int            @id @default(autoincrement())
  venueId        Int
  Venue          Venue          @relation(fields: [venueId], references: [venueId])
  Reservation    Reservation?

  @@index([venueId], map: "Deposit_venueId_fkey")
}

model Tables {
  venueId           Int
  image_url         String?
  information       String              @db.Text
  tableId           Int                 @id @default(autoincrement())
  tableTypeDetailId Int
  Reservation_table Reservation_table[]
  table_type        Table_type_detail   @relation(fields: [tableTypeDetailId], references: [tableTypeDetailId])
  venue             Venue               @relation(fields: [venueId], references: [venueId])

  @@index([tableTypeDetailId], map: "Tables_tableTypeDetailId_fkey")
  @@index([venueId], map: "Tables_venueId_fkey")
}

model Table_type_detail {
  capacity          Int
  detail            String
  name              String
  tableTypeDetailId Int      @id @default(autoincrement())
  venueId           Int
  venue             Venue    @relation(fields: [venueId], references: [venueId])
  Tables            Tables[]

  @@index([venueId], map: "Table_type_detail_venueId_fkey")
}

model Check_in_log {
  id             Int         @id @default(autoincrement())
  reserveId      Int         @unique
  check_in_time  DateTime
  check_out_time DateTime
  reserve        Reservation @relation(fields: [reserveId], references: [reservationId])
}

model Recommendation {
  userId  Int
  venueId Int
  user    User  @relation(fields: [userId], references: [userId])
  venue   Venue @relation(fields: [venueId], references: [venueId])

  @@id([userId, venueId])
  @@index([venueId], map: "Recommendation_venueId_fkey")
}

model Promotion {
  promotionId    Int      @id @default(autoincrement())
  name           String
  description    String?
  image_url      String?
  start_date     DateTime
  end_date       DateTime
  discount_price Float
  isApprove      Boolean  @default(false)
  venueId        Int
  menuId         Int
  menu           Menu     @relation(fields: [menuId], references: [menuId])
  venue          Venue    @relation(fields: [venueId], references: [venueId])

  @@index([menuId], map: "Promotion_menuId_fkey")
  @@index([venueId], map: "Promotion_venueId_fkey")
}

model Ad_business {
  advertisementId   Int                @id @default(autoincrement())
  name              String
  description       String?
  image_url         String?
  start_date        DateTime
  end_date          DateTime
  cost              Float
  isApprove         Boolean            @default(false)
  customer_type     Customer_type
  target_group      Target_group
  businessId        Int
  business_user     Business_user      @relation(fields: [businessId], references: [businessId])
  Ad_tag            Ad_tag[]
  Venue_transaction Venue_transaction?

  @@index([businessId], map: "Ad_business_businessId_fkey")
}

model Ad_tag {
  adId  Int
  tagId Int
  ads   Ad_business @relation(fields: [adId], references: [advertisementId])
  Atag  A_tag       @relation(fields: [tagId], references: [tagId])

  @@id([adId, tagId])
  @@index([tagId], map: "Ad_tag_tagId_fkey")
}

model A_tag {
  tagId  Int      @id @default(autoincrement())
  tag    String
  Ad_tag Ad_tag[]
}

model Ad_outside {
  advertisementId Int      @id
  name            String
  description     String?
  image_url       String?
  start_date      DateTime
  end_date        DateTime
  cost            Float
  ad_channel      String
}

model Ad_influencer {
  advertisementId Int        @id
  name            String
  description     String?
  image_url       String?
  Ad_influ        Ad_influ[]
}

model Ad_influ {
  advertisementId Int
  influencerId    Int
  start_date      DateTime
  end_date        DateTime
  cost            Float
  ad_influ        Ad_influencer @relation(fields: [advertisementId], references: [advertisementId])
  influ           Influencer    @relation(fields: [influencerId], references: [influencerId])

  @@id([advertisementId, influencerId])
  @@index([influencerId], map: "Ad_influ_influencerId_fkey")
}

model Influencer {
  influencerId Int        @id @default(autoincrement())
  name         String
  contact      String?
  followers    Int?
  Ad_influ     Ad_influ[]
}

model Business_user {
  businessId      Int           @id @default(autoincrement())
  username        String
  hashed_password String
  ad_business     Ad_business[]
  Property        Property[]
}

model Property {
  businessId Int
  venueId    Int
  business   Business_user @relation(fields: [businessId], references: [businessId])
  venue      Venue         @relation(fields: [venueId], references: [venueId])

  @@id([businessId, venueId])
  @@index([venueId], map: "Property_venueId_fkey")
}

model Business_finance {
  financeId Int      @id @default(autoincrement())
  venueId   Int
  date      DateTime @db.Date
  profit    Float
  venue     Venue    @relation(fields: [venueId], references: [venueId])

  @@index([venueId], map: "Business_finance_venueId_fkey")
}

model Geocoding_cache {
  geocodingCacheId Int      @id @default(autoincrement())
  query            String
  expiration       DateTime @db.Timestamp(0)
  result           String
}

model Place_nearby_cache {
  nearbyCacheId Int      @id @default(autoincrement())
  location      String   @db.LongText
  result        String   @db.Text
  expiration    DateTime @db.Timestamp(0)
}

model Geofence_cache {
  fenceCacheId Int      @id @default(autoincrement())
  geofenceId   Int
  result       String   @db.Text
  expiration   DateTime @db.Timestamp(0)
  geometry     String   @db.LongText
}

model Directions_cache {
  directionCacheId Int      @id @default(autoincrement())
  origin           String   @db.LongText
  destination      String   @db.LongText
  result           String   @db.Text
  expiration       DateTime @db.Timestamp(0)
}

model Elevation_cache {
  elevationCacheId Int      @id @default(autoincrement())
  location         String   @db.LongText
  result           String   @db.Text
  expiration       DateTime @db.Timestamp(0)
}

model Static_map_cache {
  staticCacheId Int      @id @default(autoincrement())
  parameters    String   @db.LongText
  expiration    DateTime @db.Timestamp(0)
  result        String   @db.Text
}

model Distance_matrix_cache {
  matrixCacheId Int      @id @default(autoincrement())
  origins       String   @db.LongText
  destinations  String   @db.LongText
  result        String   @db.Text
  expiration    DateTime @db.Timestamp(0)
}

model Place_details_cache {
  detailCacheId Int      @id @default(autoincrement())
  placeId       String   @db.LongText
  result        String   @db.Text
  expiration    DateTime @db.Timestamp(0)
}

model Route_details_cache {
  routeCacheId Int      @id @default(autoincrement())
  routeId      String   @db.LongText
  result       String   @db.Text
  expiration   DateTime @db.Timestamp(0)
}

model Location {
  locationId     Int              @id @default(autoincrement())
  name           String
  latitude       Decimal          @db.Decimal(10, 6)
  longtitude     Decimal          @db.Decimal(10, 6)
  address        String           @db.Text
  Saved_location Saved_location[]
}

model Saved_location {
  locationId Int
  userId     Int
  name       String
  latitude   Decimal  @db.Decimal(10, 6)
  longtitude Decimal  @db.Decimal(10, 6)
  address    String   @db.Text
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  location   Location @relation(fields: [locationId], references: [locationId])
  user       User     @relation(fields: [userId], references: [userId])

  @@id([locationId, userId])
  @@index([userId], map: "Saved_location_userId_fkey")
}

model Saved_address {
  addressId      Int      @id @default(autoincrement())
  userId         Int
  name           String
  username       Int
  user_phone_num String   @db.VarChar(10)
  latitude       Decimal  @db.Decimal(10, 6)
  longtitude     Decimal  @db.Decimal(10, 6)
  address        String   @db.Text
  createdAt      DateTime @default(now()) @db.Timestamp(0)
  Orders         Orders[]
}

model Driver_list {
  driverId             Int              @id @default(autoincrement())
  driver_first_name    String
  driver_last_name     String
  driver_phone_num     String
  driver_status        String
  driver_license_plate String
  driver_rating        Decimal
  driver_vechile_type  String
  Driver_reviews       Driver_reviews[]
  Orders               Orders[]
}

model Driver_reviews {
  driverReviewId Int         @id @default(autoincrement())
  driverId       Int
  userId         Int
  rating         Float
  review         String?
  date_added     DateTime
  driver         Driver_list @relation(fields: [driverId], references: [driverId])
  user           User        @relation(fields: [userId], references: [userId])

  @@index([driverId], map: "Driver_reviews_driverId_fkey")
  @@index([userId], map: "Driver_reviews_userId_fkey")
}

model Transaction {
  transactionId      Int                 @id @default(autoincrement())
  userId             Int
  venueId            Int
  App_transaction    App_transaction?
  user               User                @relation(fields: [userId], references: [userId])
  venue              Venue               @relation(fields: [venueId], references: [venueId])
  Transaction_detail Transaction_detail?

  @@index([userId], map: "Transaction_userId_fkey")
  @@index([venueId], map: "Transaction_venueId_fkey")
}

model Transaction_detail {
  transactionDetailId Int         @id @default(autoincrement())
  detail              String?
  timestamp           DateTime
  status              String
  total_amount        Decimal
  transactionId       Int         @unique
  transaction         Transaction @relation(fields: [transactionId], references: [transactionId])
}

model App_transaction {
  appTransactionId       Int                     @id @default(autoincrement())
  venueId                Int
  transactionId          Int                     @unique
  transaction            Transaction             @relation(fields: [transactionId], references: [transactionId])
  venue                  Venue                   @relation(fields: [venueId], references: [venueId])
  App_transaction_detail App_transaction_detail?
  Notification           Notification[]

  @@index([venueId], map: "App_transaction_venueId_fkey")
}

model App_transaction_detail {
  appTransactionDetailId Int             @id @default(autoincrement())
  detail                 String
  monthly                DateTime        @db.Timestamp(0)
  total_amount           Decimal
  timestamp              DateTime
  appTransactionId       Int             @unique
  app_transac            App_transaction @relation(fields: [appTransactionId], references: [appTransactionId])
}

model Venue_transaction {
  venueTransactionId       Int                       @id @default(autoincrement())
  venueId                  Int
  advertiseId              Int                       @unique
  Notification             Notification[]
  ad                       Ad_business               @relation(fields: [advertiseId], references: [advertisementId])
  venue                    Venue                     @relation(fields: [venueId], references: [venueId])
  Venue_transaction_detail Venue_transaction_detail?

  @@index([venueId], map: "Venue_transaction_venueId_fkey")
}

model Venue_transaction_detail {
  venueTransactionDetailId Int               @id @default(autoincrement())
  detail                   String
  total_amount             Int
  timestamp                DateTime
  venueTransactionId       Int               @unique
  venue_transaction        Venue_transaction @relation(fields: [venueTransactionId], references: [venueTransactionId])
}

model Notification {
  message            String
  appTransactionId   Int?
  notificationId     Int                @id @default(autoincrement())
  send_on            DateTime
  title              String
  venueTransactionId Int?
  app_transac        App_transaction?   @relation(fields: [appTransactionId], references: [appTransactionId])
  venue_transaction  Venue_transaction? @relation(fields: [venueTransactionId], references: [venueTransactionId])

  @@index([appTransactionId], map: "Notification_appTransactionId_fkey")
  @@index([venueTransactionId], map: "Notification_venueTransactionId_fkey")
}

model Credit_card {
  creditCardId Int      @id @default(autoincrement())
  card_no      String
  name         String
  country      String
  bank         String
  cvc          Int
  exp          DateTime @db.Date
  userId       Int
  user         User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "Credit_card_userId_fkey")
}

model Venue_credit_card {
  creditCardId Int      @id @default(autoincrement())
  card_no      String
  name         String
  country      String
  bank         String
  cvc          Int
  exp          DateTime @db.Date
  venueId      Int
  venue        Venue    @relation(fields: [venueId], references: [venueId])

  @@index([venueId], map: "Venue_credit_card_venueId_fkey")
}

model Venue_promptpay {
  promptpayId  Int   @id @default(autoincrement())
  promptpay_no Int
  venueId      Int   @unique
  venue        Venue @relation(fields: [venueId], references: [venueId])
}

model Films {
  filmId       Int      @id @default(autoincrement())
  name         String
  genre        Genre
  synopsis     String   @db.Text
  release_date DateTime @db.Date
  duration     Decimal  @db.Decimal(10, 2)
  poster_img   String
  rate         Int
  Shows        Shows[]
}

model Screens {
  screenId    Int         @id @default(autoincrement())
  theaterId   Int
  capacity    Int
  screen_type Screen_type
  screen_no   Int
  theater     Theaters    @relation(fields: [theaterId], references: [theaterId])
  Seats       Seats[]
  Shows       Shows[]

  @@index([theaterId], map: "Screens_theaterId_fkey")
}

model Theaters {
  theaterId     Int       @id @default(autoincrement())
  name          String
  address       String
  phone_num     String    @db.VarChar(10)
  promptpay_num String    @db.VarChar(10)
  latitude      Decimal   @db.Decimal(20, 10)
  longitude     Decimal   @db.Decimal(20, 10)
  Screens       Screens[]
}

model Shows {
  showId     Int      @id @default(autoincrement())
  screenId   Int
  filmId     Int
  date       DateTime @db.Date
  start_time DateTime @db.Timestamp(0)
  end_time   DateTime @db.Timestamp(0)
  price      Decimal
  film       Films    @relation(fields: [filmId], references: [filmId])
  screen     Screens  @relation(fields: [screenId], references: [screenId])

  @@index([filmId], map: "Shows_filmId_fkey")
  @@index([screenId], map: "Shows_screenId_fkey")
}

model Seats {
  seatId           Int                @id @default(autoincrement())
  screenId         Int
  seatTypeId       Int
  seat_row         Int
  seat_no          Int
  Reservation_logs Reservation_logs[]
  screen           Screens            @relation(fields: [screenId], references: [screenId])
  seat_type        Seat_types         @relation(fields: [seatTypeId], references: [seatTypeId])

  @@index([screenId], map: "Seats_screenId_fkey")
  @@index([seatTypeId], map: "Seats_seatTypeId_fkey")
}

model Seat_types {
  seatTypeId     Int     @id @default(autoincrement())
  type_name      String
  description    String  @db.Text
  price_modifier Decimal
  Seats          Seats[]
}

model Reservation_logs {
  reservationId Int       @id @default(autoincrement())
  showId        Int
  seatId        Int
  Payments      Payments?
  Seats         Seats     @relation(fields: [seatId], references: [seatId])

  @@index([seatId], map: "Reservation_logs_seatId_fkey")
}

model Payments {
  paymentId      Int              @id @default(autoincrement())
  reservationId  Int              @unique
  payment_date   DateTime
  payment_amount Decimal
  payment_method Movie_payment
  payment_status Payment_status
  reserved_log   Reservation_logs @relation(fields: [reservationId], references: [reservationId])
}

model Article_venue {
  articleId Int
  venueId   Int
  Article   Article @relation(fields: [articleId], references: [articleId])
  Venue     Venue   @relation(fields: [venueId], references: [venueId])

  @@id([articleId, venueId])
  @@index([venueId], map: "Article_venue_venueId_fkey")
}

enum Gender {
  Male
  Female
  Others
}

enum Method {
  Cash
  Promptpay
  Mobilebanking
}

enum Friend_status {
  Pending
  Friend
}

enum Contact_type {
  Email
  Phone
}

enum Day {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}

enum Order_status {
  On_going
  Completed
}

enum Ticket_status {
  Pending
  On_going
  Completed
  Dropped
}

enum Ticket_priorities {
  Low
  Medium
  High
  Critical
}

enum Article_category {
  Review
  Blog
  Question
}

enum Status {
  Pending
  Check_in
  Check_out
  Cancel
}

enum Customer_type {
  All
  Member
}

enum Target_group {
  Teen
  Young_adult
  Adult
  Elder
}

enum Genre {
  Action
  Adventure
  Animation
  Comedy
  Crime
  Drama
  Fantasy
  Horror
  Mystery
  Romance
  Sci_Fi
  Thriller
  War
  Western
  Documentary
  Musical
  Historical
  Superhero
  Family
}

enum Screen_type {
  IMAX
  X3D
  X4D
  Standard
  Kids
}

enum Movie_payment {
  Cash
  Promptpay
}

enum Payment_status {
  Pending
  Success
  Canceled
}

enum Deposit_status {
  Pending
  Completed
}
